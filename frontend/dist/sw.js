!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=9)}({8:function(e,t,n){"use strict";!function(){function t(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function n(e,n,r){var o,i=new Promise(function(i,u){t(o=e[n].apply(e,r)).then(i,u)});return i.request=o,i}function r(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return n(this[t],o,arguments)})})}function i(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function u(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[t],(r=n(e,o,arguments)).then(function(e){if(e)return new s(e,r.request)});var e,r})})}function c(e){this._index=e}function s(e,t){this._cursor=e,this._request=t}function a(e){this._store=e}function l(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function p(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new l(n)}function f(e){this._db=e}r(c,"_index",["name","keyPath","multiEntry","unique"]),o(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(s,"_cursor",["direction","key","primaryKey","value"]),o(s,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(s.prototype[e]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,r),t(n._request).then(function(e){if(e)return new s(e,n._request)})})})}),a.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},a.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},r(a,"_store",["name","keyPath","indexNames","autoIncrement"]),o(a,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(a,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(a,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new a(this._tx.objectStore.apply(this._tx,arguments))},r(l,"_tx",["objectStoreNames","mode"]),i(l,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new a(this._db.createObjectStore.apply(this._db,arguments))},r(p,"_db",["name","version","objectStoreNames"]),i(p,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},r(f,"_db",["name","version","objectStoreNames"]),i(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[a,c].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=this._store||this._index,i=o[e].apply(o,n.slice(0,-1));i.onsuccess=function(){r(i.result)}})})}),[c,a].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var h={open:function(e,t,r){var o=n(indexedDB,"open",[e,t]),i=o.request;return i&&(i.onupgradeneeded=function(e){r&&r(new p(i.result,e.oldVersion,i.transaction))}),o.then(function(e){return new f(e)})},delete:function(e){return n(indexedDB,"deleteDatabase",[e])}};e.exports=h,e.exports.default=e.exports}()},9:function(e,t,n){"use strict";n.r(t);var r=n(8);const o="restaurant-images-v1",i="restaurant-map-v1",u=["restaurant-reviews-v1",o,i],c=["/index.html","/restaurant.html","/restaurant.bundle.js","/main.bundle.js"];var s=n.n(r).a.open("restaurant-reviews",1,function(e){e.createObjectStore("restaurants")});const a={get:e=>s.then(t=>t.transaction("restaurants").objectStore("restaurants").get(e)),set:(e,t)=>s.then(n=>{const r=n.transaction("restaurants","readwrite");return r.objectStore("restaurants").put(t,e),r.complete}),delete:e=>s.then(t=>{const n=t.transaction("restaurants","readwrite");return n.objectStore("restaurants").delete(e),n.complete}),clear:()=>s.then(e=>{const t=e.transaction("restaurants","readwrite");return t.objectStore("restaurants").clear(),t.complete}),keys:()=>s.then(e=>{const t=e.transaction("restaurants"),n=[],r=t.objectStore("restaurants");return(r.iterateKeyCursor||r.iterateCursor).call(r,e=>{e&&(n.push(e.key),e.continue())}),t.complete.then(()=>n)})};self.addEventListener("install",function(e){console.log("ServiceWorker installed"),e.waitUntil(caches.open("restaurant-reviews-v1").then(function(e){return e.addAll(c)}).catch(function(e){console.log("Error has occured: ",e)}))}),self.addEventListener("activate",function(e){e.waitUntil(caches.keys().then(function(e){return Promise.all(e.filter(function(e){return e.startsWith("restaurant-")&&!u.includes(e)}).map(function(e){return caches.delete(e)}))}))}),self.addEventListener("fetch",function(e){let t=new URL(e.request.url);if(t.origin===location.origin){if("/"===t.pathname)return console.log("Serving cached index page"),void e.respondWith(caches.match("/index.html"));if("/restaurant.html"===t.pathname)return console.log("Serving restraunt page"),void e.respondWith(caches.match("/restaurant.html"));if(t.pathname.startsWith("/img/"))return console.log("Image requested, checking cache"),void e.respondWith(function(e){const t=e.url.replace(/-\d+px\.jpg$/,"");return caches.open(o).then(function(n){return n.match(t).then(function(r){return r||fetch(e).then(function(e){return n.put(t,e.clone()),e})})})}(e.request));if(t.pathname.startsWith("/maps/api/js"))return console.log("Map requested, checking cache"),void e.respondWith((n=e.request,caches.open(i).then(function(e){return e.match("map").then(function(t){return t||fetch(n,{mode:"no-cors"}).then(function(t){return e.put("map",t.clone()),t})})})))}var n,r;"/restaurants"!==t.pathname?e.respondWith(caches.match(e.request).then(function(t){return t||fetch(e.request)})):e.respondWith((r=e.request,a.get("restaurants-json").then(function(e){return e?(console.log("IndexDB JSON Found"),new Response(JSON.stringify(e))):(console.log("IndexDB Empty Returning Fetch"),fetch(r).then(function(e){let t=e.clone();return t.json().then(function(e){a.set("restaurants-json",e)}),e}))})))})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,